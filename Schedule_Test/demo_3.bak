<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>List of Courses</title>
  <!-- DataTables CSS -->
  <link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css">
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }
    h1 {
      text-align: center;
    }
    h2 {
      text-align: center;
    }
    table {
      width: 100%;
    }
    .filters {
      margin: 1em 0;
      text-align: center;
    }
    .filters label {
      margin: 0 1em;
    }

   .message-box {
      position: relative;
      background-color: #f0f8ff;
      border: 2px solid #b0c4de;
      padding: 15px 40px 15px 15px;
      margin: 20px 0;
      border-radius: 8px;
      font-family: Arial, sans-serif;
      max-width: 700px;
    }

    .close-btn {
      position: absolute;
      top: 8px;
      right: 12px;
      font-size: 18px;
      font-weight: bold;
      color: #aaa;
      cursor: pointer;
      border: none;
      background: none;
    }

    .close-btn:hover {
      color: #000;
    }

    
  </style>
</head>
<body>
  <h1>Course Offering: Fall 2025</h1>

 <div class="message-box">
    <button class="close-btn" onclick="this.parentElement.style.display='none'">×</button>
    <b>Note:</b>  We make every attempt to keep the information on this
    page up to date. In the event that there is a discrepancy between
    this course listing and the one in CAMS, the CAMS listing should
    be assumed to be correct.
  </div>

  <div class="message-box">
    <button class="close-btn" onclick="this.parentElement.style.display='none'">×</button>
     <b>Note</b>: This page is to be used for browsing through
    courses. You cannot register for courses on this
     page. Registration occurs on the CAMS system.
  </div>

  <div>
    <p>Below is a list of all classes offered in Fall 2025. You can sort this list of classes alphabetically by Faculty or Course Title.</p>
    <p>Use the 'Requirements' drop-down menu to see all classes that meet a particular requirement (AD, ADS, QR, etc).</p>
    </div>
  
  
  <div class="filters">
    <label>
      Instructor:
      <select id="filter-instructor">
        <option value="">All</option>
      </select>
    </label>
    <label>
      Requirements:
      <select id="filter-requirements">
        <option value="">All</option>
      </select>
    </label>
  </div>


  <table id="courses" class="display">
    <thead>
      <tr>
        <th>Faculty Name</th>
        <th>Course Name</th>
        <th>Degree Requirements Met</th>
      </tr>
    </thead>
    <tbody>
      <!-- Data will be loaded from CSV -->
    </tbody>
  </table>

  <!-- jQuery and DataTables JS -->
  <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
  <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/papaparse@5.4.1/papaparse.min.js"></script>

  <script>
    // Load CSV file and initialize DataTable
    Papa.parse("./courses.csv", {
      download: true,
      header: true,
      complete: function(results) {
        const data = results.data;
        const tbody = document.querySelector("#courses tbody");

        data.forEach(row => {
          if (row["FacultyName"]) { // skip empty rows
            const tr = document.createElement("tr");
            tr.innerHTML = `
              <td>${row["FacultyName"]}</td>
              <td>${row["CourseName"]}</td>
              <td>${row["CourseDivision"]}</td>
            `;
            tbody.appendChild(tr);
          }
        });

        // Initialize DataTable
        const table = $("#courses").DataTable({
          pageLength: 100,
          order: [[1, "asc"]],
          dom: 'frtip'
        });

        // Collect unique values for filters
        const departments = [...new Set(data.map(r => r["FacultyName"]).filter(Boolean))].sort();

        // --- Tokenize CourseDivision into individual requirements ---
        const requirementTokens = new Set();
        data.forEach(r => {
          if (r["CourseDivision"]) {
            r["CourseDivision"]
              .split(/[,; ]+/) // split on spaces, commas, or semicolons
              .map(token => token.trim())
              .filter(Boolean)
              .forEach(token => requirementTokens.add(token));
          }
        });
        const requirements = [...requirementTokens].sort();

        const deptSelect = document.getElementById("filter-instructor");
        const reqSelect = document.getElementById("filter-requirements");    

        departments.forEach(dep => {
          const option = document.createElement("option");
          option.value = dep;
          option.textContent = dep;
          deptSelect.appendChild(option);
        });

        requirements.forEach(req => {
          const option = document.createElement("option");
          option.value = req;
          option.textContent = req;
          reqSelect.appendChild(option);
        });

        // Apply filters on change
        deptSelect.addEventListener("change", function() {
          const val = this.value;
          table.column(0).search(val ? '^' + escapeRegex(val) + '$' : '', true, false).draw();
        });

	  reqSelect.addEventListener("change", function() {
	      const val = this.value;
	      if (val) {
		  // Require exact token match (not substring)
		  const regex = `(^|[ ,;])${escapeRegex(val)}([ ,;]|$)`;
		  table.column(2).search(regex, true, false).draw();
	      } else {
		  table.column(2).search('', true, false).draw();
	      }
	  });
	  
	  // Helper to escape regex special chars
	  function escapeRegex(text) {
	      return text.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	  }

    
      }
    });
  </script>
</body>
</html>
